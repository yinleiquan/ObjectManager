package com.example.yjlove.objectmanager.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.yjlove.objectmanager.bean.entity.MyObject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MY_OBJECT".
*/
public class MyObjectDao extends AbstractDao<MyObject, Long> {

    public static final String TABLENAME = "MY_OBJECT";

    /**
     * Properties of entity MyObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectName = new Property(1, String.class, "objectName", false, "OBJECT_NAME");
        public final static Property ObjectType = new Property(2, String.class, "objectType", false, "OBJECT_TYPE");
        public final static Property InputDate = new Property(3, String.class, "inputDate", false, "INPUT_DATE");
        public final static Property ObjectCount = new Property(4, int.class, "objectCount", false, "OBJECT_COUNT");
        public final static Property OutputDate = new Property(5, String.class, "outputDate", false, "OUTPUT_DATE");
        public final static Property Note = new Property(6, String.class, "note", false, "NOTE");
    };


    public MyObjectDao(DaoConfig config) {
        super(config);
    }
    
    public MyObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_OBJECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OBJECT_NAME\" TEXT NOT NULL ," + // 1: objectName
                "\"OBJECT_TYPE\" TEXT NOT NULL ," + // 2: objectType
                "\"INPUT_DATE\" TEXT NOT NULL ," + // 3: inputDate
                "\"OBJECT_COUNT\" INTEGER NOT NULL ," + // 4: objectCount
                "\"OUTPUT_DATE\" TEXT," + // 5: outputDate
                "\"NOTE\" TEXT);"); // 6: note
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_OBJECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MyObject entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getObjectName());
        stmt.bindString(3, entity.getObjectType());
        stmt.bindString(4, entity.getInputDate());
        stmt.bindLong(5, entity.getObjectCount());
 
        String outputDate = entity.getOutputDate();
        if (outputDate != null) {
            stmt.bindString(6, outputDate);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(7, note);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MyObject entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getObjectName());
        stmt.bindString(3, entity.getObjectType());
        stmt.bindString(4, entity.getInputDate());
        stmt.bindLong(5, entity.getObjectCount());
 
        String outputDate = entity.getOutputDate();
        if (outputDate != null) {
            stmt.bindString(6, outputDate);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(7, note);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MyObject readEntity(Cursor cursor, int offset) {
        MyObject entity = new MyObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // objectName
            cursor.getString(offset + 2), // objectType
            cursor.getString(offset + 3), // inputDate
            cursor.getInt(offset + 4), // objectCount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // outputDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // note
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MyObject entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectName(cursor.getString(offset + 1));
        entity.setObjectType(cursor.getString(offset + 2));
        entity.setInputDate(cursor.getString(offset + 3));
        entity.setObjectCount(cursor.getInt(offset + 4));
        entity.setOutputDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNote(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MyObject entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MyObject entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
